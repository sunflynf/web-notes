"use strict";(self.webpackChunkmy_web_notes=self.webpackChunkmy_web_notes||[]).push([[4920],{5522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(4848),s=n(8453);const o={description:"Redux add-ons",tags:["JavaScript","TypeScript","React","Redux","Extension"]},i="@redux-toolkits/query",c={id:"summarize/package/react/RTK-query",title:"@redux-toolkits/query",description:"Redux add-ons",source:"@site/docs/summarize/package/react/RTK-query.md",sourceDirName:"summarize/package/react",slug:"/summarize/package/react/RTK-query",permalink:"/web-notes/docs/summarize/package/react/RTK-query",draft:!1,unlisted:!1,editUrl:"https://github.com/sunflynf/web-notes/tree/main/docs/summarize/package/react/RTK-query.md",tags:[{inline:!0,label:"JavaScript",permalink:"/web-notes/docs/tags/java-script"},{inline:!0,label:"TypeScript",permalink:"/web-notes/docs/tags/type-script"},{inline:!0,label:"React",permalink:"/web-notes/docs/tags/react"},{inline:!0,label:"Redux",permalink:"/web-notes/docs/tags/redux"},{inline:!0,label:"Extension",permalink:"/web-notes/docs/tags/extension"}],version:"current",frontMatter:{description:"Redux add-ons",tags:["JavaScript","TypeScript","React","Redux","Extension"]},sidebar:"documentSidebar",previous:{title:"React Dependencies",permalink:"/web-notes/docs/category/react-dependencies"},next:{title:"Notistack",permalink:"/web-notes/docs/summarize/package/react/notistack"}},a={},d=[{value:"Project Structure",id:"project-structure",level:2},{value:"Setting Up RTK Query",id:"setting-up-rtk-query",level:2},{value:"Summary",id:"summary",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"redux-toolkitsquery",children:"@redux-toolkits/query"}),"\n",(0,r.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"my-app/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 store.ts\n\u2502   \u2502   \u2514\u2500\u2500 api.ts\n\u2502   \u251c\u2500\u2500 features/\n\u2502   \u2502   \u251c\u2500\u2500 counter/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Counter.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 counterSlice.ts\n\u2502   \u2502   \u2514\u2500\u2500 posts/\n\u2502   \u2502       \u251c\u2500\u2500 Posts.tsx\n\u2502   \u2502       \u2514\u2500\u2500 postsApi.ts\n\u2502   \u251c\u2500\u2500 App.tsx\n\u2502   \u251c\u2500\u2500 index.tsx\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 ...\n"})}),"\n",(0,r.jsx)(t.h2,{id:"setting-up-rtk-query",children:"Setting Up RTK Query"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Install necessary packages:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install @reduxjs/toolkit react-redux\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Create the Redux store and API service:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// src/app/store.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { postsApi } from '../features/posts/postsApi';\nimport counterReducer from '../features/counter/counterSlice';\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    [postsApi.reducerPath]: postsApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(postsApi.middleware),\n});\n\nsetupListeners(store.dispatch);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// src/features/posts/postsApi.ts\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport const postsApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n  endpoints: (builder) => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => 'posts',\n    }),\n    getPostById: builder.query<Post, number>({\n      query: (id) => `posts/${id}`,\n    }),\n  }),\n});\n\nexport const { useGetPostsQuery, useGetPostByIdQuery } = postsApi;\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Provide the store to your React app:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// src/index.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Create a component that fetches data using RTK Query:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// src/features/posts/Posts.tsx\nimport React from 'react';\nimport { useGetPostsQuery } from './postsApi';\n\nconst Posts: React.FC = () => {\n  const { data: posts, error, isLoading } = useGetPostsQuery();\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.toString()}</div>;\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <ul>\n        {posts?.map((post) => (\n          <li key={post.id}>\n            <h2>{post.title}</h2>\n            <p>{post.body}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Posts;\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Use the connected component in your app:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// src/App.tsx\nimport React from 'react';\nimport Counter from './features/counter/Counter';\nimport Posts from './features/posts/Posts';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <h1>Redux Toolkit Query Example</h1>\n      <Counter />\n      <Posts />\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Setup RTK Query Service:"})," Define an API service using ",(0,r.jsx)(t.code,{children:"createApi"})," and ",(0,r.jsx)(t.code,{children:"fetchBaseQuery"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Configure the Store:"})," Add the API reducer and middleware to the Redux store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Fetch Data in Components:"})," Use the generated hooks (e.g., ",(0,r.jsx)(t.code,{children:"useGetPostsQuery"}),") to fetch data in your components."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);