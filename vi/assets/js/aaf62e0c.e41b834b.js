"use strict";(self.webpackChunkmy_web_notes=self.webpackChunkmy_web_notes||[]).push([[8777],{5294:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=r(4848),a=r(8453);const s={description:"Tanstack tech for QUERY & FETCHING",tags:["JavaScript","TypeScript","React"]},i="Tanstack - React Query",o={id:"summarize/package/react/tanstack/react-query",title:"Tanstack - React Query",description:"Tanstack tech for QUERY & FETCHING",source:"@site/docs/summarize/package/react/tanstack/react-query.md",sourceDirName:"summarize/package/react/tanstack",slug:"/summarize/package/react/tanstack/react-query",permalink:"/web-notes/vi/docs/summarize/package/react/tanstack/react-query",draft:!1,unlisted:!1,editUrl:"https://github.com/sunflynf/web-notes/tree/main/docs/summarize/package/react/tanstack/react-query.md",tags:[{inline:!0,label:"JavaScript",permalink:"/web-notes/vi/docs/tags/java-script"},{inline:!0,label:"TypeScript",permalink:"/web-notes/vi/docs/tags/type-script"},{inline:!0,label:"React",permalink:"/web-notes/vi/docs/tags/react"}],version:"current",frontMatter:{description:"Tanstack tech for QUERY & FETCHING",tags:["JavaScript","TypeScript","React"]},sidebar:"documentSidebar",previous:{title:"Tanstack - React Form",permalink:"/web-notes/vi/docs/summarize/package/react/tanstack/react-form"},next:{title:"Tanstack - React Router",permalink:"/web-notes/vi/docs/summarize/package/react/tanstack/react-router"}},u={},c=[{value:"Quick start",id:"quick-start",level:2},{value:"useQuery",id:"usequery",level:2},{value:"useQueries",id:"usequeries",level:2},{value:"useMutation",id:"usemutation",level:2},{value:"Features",id:"features",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tanstack---react-query",children:"Tanstack - React Query"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Current version: v5"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i @tanstack/react-query\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Recommend for catching errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i -D @tanstack/eslint-plugin-query\n"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import {\r\n  useQuery,\r\n  useMutation,\r\n  useQueryClient,\r\n  QueryClient,\r\n  QueryClientProvider,\r\n} from '@tanstack/react-query'\r\n// add-ons for checking query \r\n// Link: https://tanstack.com/query/latest/docs/framework/react/devtools\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools'; \r\n\r\nimport { getTodos, postTodo } from '../my-api'\r\n\r\n// Create a client\r\nconst queryClient = new QueryClient()\r\n\r\nfunction App() {\r\n  return (\r\n    // Provide the client to your App\r\n    <QueryClientProvider client={queryClient}>\r\n      <Todos />\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\nfunction Todos() {\r\n  // Access the client\r\n  const queryClient = useQueryClient()\r\n\r\n  // Queries\r\n  const query = useQuery({ queryKey: ['todos'], queryFn: getTodos })\r\n\r\n  // Mutations\r\n  const mutation = useMutation({\r\n    mutationFn: postTodo,\r\n    onSuccess: () => {\r\n      // Invalidate and refetch\r\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <ul>{query.data?.map((todo) => <li key={todo.id}>{todo.title}</li>)}</ul>\r\n\r\n      <button\r\n        onClick={() => {\r\n          mutation.mutate({\r\n            id: Date.now(),\r\n            title: 'Do Laundry',\r\n          })\r\n        }}\r\n      >\r\n        Add Todo\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usequery",children:"useQuery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const {\r\n  data, // TData | undefined\r\n  dataUpdatedAt, // number\r\n  error, // null | TError\r\n  errorUpdatedAt, // number\r\n  failureCount,\r\n  failureReason,\r\n  fetchStatus, // fetching | paused | idle (not fetching)\r\n  isError,\r\n  isFetched,\r\n  isFetchedAfterMount,\r\n  isFetching,\r\n  isInitialLoading,\r\n  isLoading,\r\n  isLoadingError,\r\n  isPaused,\r\n  isPending,\r\n  isPlaceholderData,\r\n  isRefetchError,\r\n  isRefetching,\r\n  isStale,\r\n  isSuccess,\r\n  refetch, // refetch(queryKey?) => Promise<UseQueryResult>\r\n  status, // pending | error | success\r\n} = useQuery(\r\n  {\r\n    queryKey, \r\n    // unknown[]. \r\n    // Required, query automatically update when this key change\r\n    queryFn,\r\n    // (context: { queryKey, signal?, meta, InfiniteQueries? }) => Promise<TData>\r\n    // Required if QueryClient has defaultQueryFn\r\n    // + meta: { Record<string, unknown> | undefined }\r\n    // + InfiniteQueries: { pageParam }\r\n    queryKeyHashFn,\r\n    // (queryKey) => string\r\n    enabled,\r\n    // boolean. Set "false" to turn off automatically update\r\n    gcTime,\r\n    // number | Infinity (disabled)\r\n    // Garbage collected time. Default: 1000 * 60 * 5 miliseconds\r\n    networkMode,\r\n    // "online" | "always" | "offlineFirst"\r\n    initialData,\r\n    // TData | () => TData\r\n    // Persisted to the cache\r\n    initialDataUpdatedAt,\r\n    // number | (() => number | undefined)\r\n    // If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated\r\n    notifyOnChangeProps,\r\n    // string[] | "all" | (() => string[] | "all")\r\n    // If set, component will only re-render if any of the listed properties change\r\n    placeholderData,\r\n    // TData\r\n    // Not persisted to the cache\r\n    refetchInterval,\r\n    // number | false | ((query) => number | false | undefined)\r\n    refetchIntervalInBackground,\r\n    // boolean\r\n    refetchOnMount,\r\n    // boolean | "always" | ((query) => boolean | "always")\r\n    // - true > refetch on mount if the data is stale\r\n    // - false > off\r\n    refetchOnReconnect,\r\n    // boolean | "always" | ((query) => boolean | "always")\r\n    refetchOnWindowFocus,\r\n    // boolean | "always" | ((query) => boolean | "always")\r\n    retry,\r\n    // boolean | number | (failureCount, error) => boolean\r\n    // - true > infinite\r\n    // - false > off\r\n    retryOnMount, \r\n    // boolean\r\n    retryDelay, \r\n    // number | (retryAttempt, error) => number\r\n    select,\r\n    // (data) => unknown\r\n    // Choose data return, run if data changed. Should optimize with useCallback \r\n    staleTime,\r\n    // number | Infinity\r\n    // Default is 0\r\n    structuralSharing,\r\n    // boolean | (oldData: unknown | undefined, newData: unknown) => unknown)\r\n    // - false > disabled\r\n    throwOnError,\r\n    // undefined | boolean | (error, query) => boolean\r\n    meta,\r\n    // Record<string, unknown>\r\n  },\r\n  queryClient, // OPTIONAL if components wrap by QueryClientProvider\r\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usequeries",children:"useQueries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const results = useQueries({\r\n  queries: [], // UseQueryProps[]\r\n  queryClient, // OPTIONAL\r\n  combine // OPTIONAL. (result) => TCombinedResult\r\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const results = useQueries({\r\n  queries: [1, 2, 3].map((id) => ({\r\n    queryKey: ['post', id],\r\n    queryFn: () => fetchPost(id),\r\n    staleTime: Infinity,\r\n  })),\r\n  combine: (results) => {\r\n    return {\r\n      data: results.map((result) => result.data),\r\n      pending: results.some((result) => result.isPending),\r\n    }\r\n  },\r\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usemutation",children:"useMutation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {\r\n  data,\r\n  error,\r\n  isError,\r\n  isIdle,\r\n  isPending,\r\n  isPaused,\r\n  isSuccess,\r\n  failureCount,\r\n  failureReason,\r\n  mutate, \r\n  // mutate(variables, options?) => void\r\n  // + options: { onError, onSettled, onSuccess }\r\n  mutateAsync,\r\n  // mutate(variables, options?) => Promise<TData>\r\n  reset,\r\n  // () => void\r\n  // Clean multation internal state\r\n  status,\r\n  // idle | pending | error | success\r\n  submittedAt,\r\n  variables,\r\n} = useMutation({\r\n  mutationFn, \r\n  // (variables) => Promise<TData>\r\n  // Required, but only if no default mutation func has been defined\r\n  mutationKey,\r\n  // unknown[]\r\n  onMutate,\r\n  // (variables) => Promise<TContext|void> | TContext | void\r\n  onSuccess,\r\n  // (data, variables, context) => Promise<unknown> | unknown\r\n  onError,\r\n  // (err, variables, context?) => Promise<unknown> | unknown\r\n  onSettled,\r\n  // (data, err, variables, context?) => Promise<unknown> | unknown\r\n  retry,\r\n  // boolean | number | (failCount, err) => boolean\r\n  retryDelay,\r\n  // number | (retryAttemp, err) => number\r\n  scope,\r\n  // { id: string }\r\n  // Defaults to a unique id (so that all mutations run in parallel)\r\n  // Mutations with the same scope id will run in serial\r\n  gcTime,\r\n  meta,\r\n  networkMode,\r\n  throwOnError,\r\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/queryOptions",children:"queryOptions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useInfiniteQuery",children:"useInfiniteQuery"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);