"use strict";(self.webpackChunkmy_web_notes=self.webpackChunkmy_web_notes||[]).push([[9307],{5842:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=n(4848),s=n(8453);const o={description:"best extension for FORM control in React",tags:["JavaScript","TypeScript","React","Extension"]},i="React Hook Forms",l={id:"summarize/package/react/react-hook-form",title:"React Hook Forms",description:"best extension for FORM control in React",source:"@site/docs/summarize/package/react/react-hook-form.md",sourceDirName:"summarize/package/react",slug:"/summarize/package/react/react-hook-form",permalink:"/web-notes/vi/docs/summarize/package/react/react-hook-form",draft:!1,unlisted:!1,editUrl:"https://github.com/sunflynf/web-notes/tree/main/docs/summarize/package/react/react-hook-form.md",tags:[{inline:!0,label:"JavaScript",permalink:"/web-notes/vi/docs/tags/java-script"},{inline:!0,label:"TypeScript",permalink:"/web-notes/vi/docs/tags/type-script"},{inline:!0,label:"React",permalink:"/web-notes/vi/docs/tags/react"},{inline:!0,label:"Extension",permalink:"/web-notes/vi/docs/tags/extension"}],version:"current",frontMatter:{description:"best extension for FORM control in React",tags:["JavaScript","TypeScript","React","Extension"]},sidebar:"documentSidebar",previous:{title:"React Helmet",permalink:"/web-notes/vi/docs/summarize/package/react/react-helmet"},next:{title:"React i18 next",permalink:"/web-notes/vi/docs/summarize/package/react/react-i18next"}},a={},c=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"useForm",id:"useform",level:2},{value:"FormProvider &amp; useFormContext",id:"formprovider--useformcontext",level:2},{value:"useWatch",id:"usewatch",level:2},{value:"useFormState",id:"useformstate",level:2},{value:"Controller &amp;&amp; useController",id:"controller--usecontroller",level:2},{value:"useFieldArray",id:"usefieldarray",level:2},{value:"Resolvers",id:"resolvers",level:2},{value:"Joi",id:"joi",level:3},{value:"Zod",id:"zod",level:3},{value:"Yup",id:"yup",level:3},{value:"class-validator",id:"class-validator",level:3},{value:"io-ts",id:"io-ts",level:3},{value:"superstruct",id:"superstruct",level:3},{value:"Compare",id:"compare",level:3}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"react-hook-forms",children:"React Hook Forms"}),"\n",(0,t.jsx)(r.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#quick-start",children:"Quick start"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#useform",children:"useForm"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#formprovider--useformcontext",children:"FormProvider & useFormContext"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#usewatch",children:"useWatch"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#useformstate",children:"useFormState"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#controller--usecontroller",children:"Controller & useController"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#usefieldarray",children:"useFieldArray"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"#resolvers",children:"Resolvers"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#joi",children:"Joi"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#zod",children:"Zod"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#yup",children:"Yup"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#class-validator",children:"class-validator"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#io-ts",children:"io-ts"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#superstruct",children:"superstruct"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#compare",children:(0,t.jsx)(r.strong,{children:"Compare"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm i react-hook-form\r\nnpm i -D @hookform/devtools\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:'import React from "react";\r\nimport { useForm, SubmitHandler } from "react-hook-form";\r\nimport { DevTool } from "@hookform/devtools"; // OPTIONAL\r\n\r\ntype FormValues = {\r\n  firstName: string\r\n  name: string\r\n  email: string\r\n}\r\n\r\nexport default function App() {\r\n  const { register, handleSubmit } = useForm<FormValues>()\r\n  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data)\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <input {...register("name")} />\r\n        <input type="email" {...register("email")} />\r\n        <input type="submit" />\r\n      </form>\r\n      <DevTool control={control} />\r\n    </>\r\n  )\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"useform",children:"useForm"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'const {\r\n  watch, \r\n  // watch(name?: string | string[] | (data, options?) => any)) => any\r\n  getValues, \r\n  // getValues(name?: string | string[]) => any\r\n  // - NOTE: getValues not trigger re-renders or subcribe to input changes\r\n  setValue, \r\n  // setValue(name, value, configs?) \r\n  // + configs: { shouldValidate, shouldDirty, shouldTouch }\r\n  setFocus, \r\n  // setFocus(\'f\', { shouldSelect: boolean })\r\n  resetField, \r\n  // resetField(name, options?) \r\n  // + options: { keepError, keepDirty, keepTouched, defaultValue }\r\n  reset,\r\n  // reset(values: T | (v: T) => any, options?)\r\n  // + options: { keepError, keepDirty, keepDirtyValues, keepValues, keepDefaultValues, keepIsSubmitted, keepTouched, keepIsValid, keepSubmitCount }\r\n  getFieldState,\r\n  // getFieldState(name) => ({ isDirty, isTouched, invalid, error })\r\n  // - VERSION: 7.25.0\r\n  formState: { \r\n    defaultValues, \r\n    isDirty, // true if user modifies any field\r\n    dirtyFields, // object with the user-modified fields\r\n    touchedFields, // containing all fields user intereacted with\r\n    isSubmitted, \r\n    isSubmitSuccessful,\r\n    isSubmitting,\r\n    isLoading, // true if form is currently loading async defaultValues\r\n    submitCount, \r\n    isValid, \r\n    isValidating, \r\n    validatingFields, \r\n    errors\r\n  },\r\n  trigger,\r\n  // trigger(name?: string | string[], options?) => Promise<boolean>\r\n  // + options: { shouldFocus }\r\n  setError,\r\n  // setError(name, error, config?)\r\n  // + error: { type: string, message?: string }\r\n  // + config: { shouldFocus }\r\n  clearErrors,\r\n  // clearErrors(name?: string | string[])\r\n  control,\r\n  // - NOTE: use with Controller, useControl | useWatch | useFieldArray\r\n  handleSubmit,\r\n  // handleSubmit(onSubmit, onSubmitError)\r\n  // + onSubmit = (data, event) => Promise<void>\r\n  // + onSubmitError = (error, event) => void\r\n  register,\r\n  // register(name, options?) => ({ onChange, onBlur, name, ref })\r\n  // + options: {\r\n  //    required, minLength, maxLength, min, max, pattern: any | { value: any, message: string } - rules\r\n  //    validate: (value, formValues) => any | { [ruleKey: string]: (v, fv) => any } - special rules\r\n  //    valueAsNumber, valueAsDate: boolean - return right type\r\n  //    value\r\n  //    onChange, onBlur: (e) => void\r\n  //    shouldUnregister: boolean - remove when unmount\r\n  //    deps: string | string[] - trigger when value in deps change\r\n  // }\r\n  unregister\r\n  // unregister(name: string | string[], options?)\r\n  // + options: { keepError, keepDirty, keepTouched, keepDefaultValue, keepValue, keepIsValid }\r\n} = useForm({\r\n  mode: "onSubmit" | "onChange" | "onBlur", // validate before submit - onSubmit\r\n  reValidateMode: "onSubmit" | "onChange" | "onBlur", // validate after submit - onChange\r\n  defaultValues, // {} | async () => await fetch(\'api\')\r\n  shouldFocusError,\r\n  shouldUnregister, // reset values & errors when unmount\r\n  criteriaMode: "firstError" | "all"\r\n  resolver, // Integrates with your preferred schema validation library\r\n  context, // A context object to supply for your schema validation.\r\n});\n'})}),"\n",(0,t.jsx)(r.h2,{id:"formprovider--useformcontext",children:"FormProvider & useFormContext"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:'import React from "react"\r\nimport { useForm, FormProvider, useFormContext } from "react-hook-form"\r\n\r\nexport default function App() {\r\n  const formCtx = useForm()\r\n  const onSubmit = (data) => console.log(data)\r\n\r\n  return (\r\n    <FormProvider {...formCtx}>\r\n      {/* pass all methods into the context */}\r\n      <form onSubmit={formCtx.handleSubmit(onSubmit)}>\r\n        <NestedInput />\r\n        <input type="submit" />\r\n      </form>\r\n    </FormProvider>\r\n  )\r\n}\r\n\r\nfunction NestedInput() {\r\n  const { register } = useFormContext() // retrieve all hook methods\r\n  return <input {...register("test")} />\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"usewatch",children:"useWatch"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"const watchData = useWatch({\r\n    name, // string | string[]\r\n    control, // optional if use FormProvider\r\n    defaultValue, // Optional: value return before initial render  \r\n})\r\n\r\nconst watchDob = useWatch({ name: 'dob' });\r\nconst [watchFirstName, watchLastName] = useWatch({ name: ['firstName', 'lastName'] });\r\n\r\n// Custom hook for newest data\r\nconst useFormValues = () => {\r\n  const { getValues } = useFormContext()\r\n  return {\r\n    ...useWatch(), // subscribe to form value updates\r\n    ...getValues(), // always merge with latest form values\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"useformstate",children:"useFormState"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"const { \r\n  defaultValues, \r\n  isDirty, // true if user modifies any field\r\n  dirtyFields, // object with the user-modified fields\r\n  touchedFields, // containing all fields user intereacted with\r\n  isSubmitted, \r\n  isSubmitSuccessful,\r\n  isSubmitting,\r\n  isLoading, // true if form is currently loading async defaultValues\r\n  submitCount, \r\n  isValid, \r\n  isValidating, \r\n  validatingFields, \r\n  errors\r\n} = useFormState({\r\n    control, // optional if use FormProvider\r\n    name // Optional: string | string[]\r\n})\n"})}),"\n",(0,t.jsx)(r.h2,{id:"controller--usecontroller",children:"Controller && useController"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"const {\r\n    field: { onChange, onBlur, value, disabled, name, ref },\r\n    fieldState: { invalid, isTouched, isDirty, error },\r\n    formState\r\n} = useController({\r\n    name, // string\r\n    control, // optional if use FormProvider\r\n    // Optional\r\n    rules, \r\n    shouldUnregister,\r\n    disabled\r\n})\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"<Controller\r\n    name='' // required\r\n    control={control} // optional if use FormProvider\r\n    defaultValue={{}}\r\n    rules={{}}\r\n    shouldUnregister\r\n    disabled\r\n    // Main Components\r\n    render={({ field, fieldState, formState }) => ()}\r\n/>\n"})}),"\n",(0,t.jsx)(r.h2,{id:"usefieldarray",children:"useFieldArray"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"// + focusOptions: { shouldFocus, focusIndex, focusName }\r\nconst {\r\n    fields, \r\n    // object & { id: string }\r\n    prepend, \r\n    // prepend(obj: object | object[], focusOptions?)\r\n    append, \r\n    // append(obj: object | object[], focusOptions?)\r\n    insert, \r\n    // insert(index, value: object | object[], focusOption?)\r\n    update,\r\n    // update(index, value: object)\r\n    replace,\r\n    // replace(values: object[])\r\n    remove, \r\n    // remove(index?: number | number[])\r\n    swap, \r\n    // swap(firstIndex, secondIndex)\r\n    move, \r\n    // move(currentIndex, toIndex)\r\n} = useFieldArray({\r\n    name, // string\r\n    control, // optional if use FormProvider\r\n    shouldUnregister,\r\n    rules\r\n});\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:'import React from "react";\r\nimport { useForm, useFieldArray } from "react-hook-form";\r\n\r\nfunction App() {\r\n  const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n    defaultValues: { test: [] } \r\n  });\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: "test"\r\n  });\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit(data => console.log(data))}>\r\n      <ul>\r\n        {fields.map((item, index) => (\r\n          <li key={item.id}>\r\n            <input {...register(`test.${index}.firstName`)} />\r\n            <Controller\r\n              render={({ field }) => <input {...field} />}\r\n              name={`test.${index}.lastName`}\r\n              control={control}\r\n            />\r\n            <button type="button" onClick={() => remove(index)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button\r\n        type="button"\r\n        onClick={() => append({ firstName: "bill", lastName: "luo" })}\r\n      >\r\n        append\r\n      </button>\r\n      <input type="submit" />\r\n    </form>\r\n  );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"resolvers",children:"Resolvers"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install @hookform/resolvers\n"})}),"\n",(0,t.jsx)(r.h3,{id:"joi",children:"Joi"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/joi",children:"Joi"})," - The most powerful data validation library for JS."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { joiResolver } from '@hookform/resolvers/joi';\r\nimport Joi from 'joi';\r\n\r\nconst schema = Joi.object({\r\n  name: Joi.string().required(),\r\n  age: Joi.number().required(),\r\n});\r\n\r\nconst resolver = joiResolver(schema);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"zod",children:"Zod"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/zod",children:"Zod"})," - TypeScript-first schema validation with static type inference"]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\n\r\nconst schema = z.object({\r\n  name: z.string().min(1, { message: 'Required' }),\r\n  age: z.number().min(10),\r\n});\r\n\r\nconst resolver = zodResolver(schema);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"yup",children:"Yup"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/yup",children:"Yup"})," - Dead simple Object schema validation."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nconst schema = yup\r\n  .object()\r\n  .shape({\r\n    name: yup.string().required(),\r\n    age: yup.number().required(),\r\n  })\r\n  .required();\r\n\r\nconst resolver = yupResolver(schema);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"class-validator",children:"class-validator"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/class-validator",children:"class-validator"})," - Decorator-based property validation for classes."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Add this code to ",(0,t.jsx)(r.code,{children:"tsconfig.json"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'"strictPropertyInitialization": false,\r\n"experimentalDecorators": true\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { classValidatorResolver } from '@hookform/resolvers/class-validator';\r\nimport { Length, Min, IsEmail } from 'class-validator';\r\n\r\nclass User {\r\n  @Length(2, 30)\r\n  username: string;\r\n\r\n  @IsEmail()\r\n  email: string;\r\n}\r\n\r\nconst resolver = classValidatorResolver(User);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"io-ts",children:"io-ts"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/io-ts",children:"io-ts"})," - Validate your data with powerful decoders."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { ioTsResolver } from '@hookform/resolvers/io-ts';\r\nimport t from 'io-ts';\r\n// you don't have to use io-ts-types, but it's very useful\r\nimport tt from 'io-ts-types';\r\n\r\nconst schema = t.type({\r\n  username: t.string,\r\n  age: tt.NumberFromString,\r\n});\r\n\r\nconst resolver = ioTsResolver(schema);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"superstruct",children:"superstruct"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/superstruct",children:"superstruct"})," - A simple and composable way to validate data in JavaScript (or TypeScript)."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { superstructResolver } from '@hookform/resolvers/superstruct';\r\nimport { object, string, number } from 'superstruct';\r\n\r\nconst schema = object({\r\n  name: string(),\r\n  age: number(),\r\n});\r\n\r\nconst resolver = superstructResolver(schema);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"compare",children:"Compare"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Feature"}),(0,t.jsx)(r.th,{children:"Yup"}),(0,t.jsx)(r.th,{children:"Zod"}),(0,t.jsx)(r.th,{children:"Joi"}),(0,t.jsx)(r.th,{children:"class-validator"}),(0,t.jsx)(r.th,{children:"io-ts"}),(0,t.jsx)(r.th,{children:"Superstruct"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"TypeScript Support"})}),(0,t.jsx)(r.td,{children:"Good"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Excellent"})}),(0,t.jsx)(r.td,{children:"Limited"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Excellent"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Excellent"})}),(0,t.jsx)(r.td,{children:"Good"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"API Style"})}),(0,t.jsx)(r.td,{children:"Fluent"}),(0,t.jsx)(r.td,{children:"Fluent"}),(0,t.jsx)(r.td,{children:"Fluent"}),(0,t.jsx)(r.td,{children:"Declarative"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.em,{children:"Functional"})}),(0,t.jsx)(r.td,{children:"Fluent"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Popularity"})}),(0,t.jsx)(r.td,{children:"High"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Growing"})}),(0,t.jsx)(r.td,{children:"High"}),(0,t.jsxs)(r.td,{children:["Popular in ",(0,t.jsx)(r.strong,{children:"NestJS"})]}),(0,t.jsx)(r.td,{children:"Niche"}),(0,t.jsx)(r.td,{children:"Moderate"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Validation Type"})}),(0,t.jsx)(r.td,{children:"Sync/Async"}),(0,t.jsx)(r.td,{children:"Sync"}),(0,t.jsx)(r.td,{children:"Sync/Async"}),(0,t.jsx)(r.td,{children:"Sync/Async"}),(0,t.jsx)(r.td,{children:"Sync"}),(0,t.jsx)(r.td,{children:"Sync"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Use Case"})}),(0,t.jsx)(r.td,{children:"Forms, general validation"}),(0,t.jsx)(r.td,{children:"Type-safe validation"}),(0,t.jsx)(r.td,{children:"Node.js services, general validation"}),(0,t.jsx)(r.td,{children:"Class-based validation"}),(0,t.jsx)(r.td,{children:"Functional programming"}),(0,t.jsx)(r.td,{children:"General validation"})]})]})]})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var t=n(6540);const s={},o=t.createContext(s);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);